{"version":3,"sources":["logo.svg","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","state","formData","reports","variables","options","report","variable","option","finishedMaps","selectedMaps","handleSelect","value","currentIndex","indexOf","newSelectedMaps","splice","length","push","setState","localStorage","getItem","setItem","JSON","stringify","formDataNew","require","newFinishedMaps","parse","this","window","open","classes","Container","component","Grid","container","spacing","item","xs","className","paper","Typography","variant","form","noValidate","Autocomplete","onChange","event","newValue","renderInput","params","TextField","label","margin","disabled","id","Button","fullWidth","color","submit","onClick","createMap","viewDualMap","List","map","labelId","ListItem","key","role","undefined","dense","button","viewMap","ListItemText","primary","ListItemSecondaryAction","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","React","Component","withStyles","theme","marginTop","display","flexDirection","alignItems","width","withTheme","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2913ed4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n\tButton,\r\n\tTypography,\r\n\tCheckbox,\r\n\tTextField,\r\n\tGrid,\r\n\tContainer,\r\n\tList,\r\n\tListItem,\r\n\tListItemSecondaryAction,\r\n\tListItemIcon,\r\n\tListItemText,\r\n\tIconButton,\r\n} from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab'\r\n\r\nconst styles = (theme) => ({\r\n\tpaper: {\r\n\t\tmarginTop: theme.spacing(8),\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\talignItems: 'center',\r\n\t},\r\n\tform: {\r\n\t\twidth: '100%', // Fix IE 11 issue.\r\n\t\tmarginTop: theme.spacing(1),\r\n\t},\r\n\tsubmit: {\r\n\t\tmargin: theme.spacing(3, 0, 2),\r\n\t},\r\n});\r\n\r\nclass Main extends React.Component {\r\n\tstate = {\r\n\t\tformData: {\r\n\t\t\treports: [],\r\n\t\t\tvariables: [],\r\n\t\t\toptions: [],\r\n\t\t},\r\n\t\treport: null,\r\n\t\tvariable: null,\r\n\t\toption: null,\r\n\t\tfinishedMaps: [],\r\n\t\tselectedMaps: [],\r\n\t}\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tif (localStorage.getItem(\"finishedMaps\") === null) {\r\n\t\t\tlet sampleMaps = [{\r\n\t\t\t\treport: \"Ibiza\",\r\n\t\t\t\tvariable: \"Average Audience\",\r\n\t\t\t\toption: \"Increment\"\r\n\t\t\t},{\r\n\t\t\t\treport: \"Target\",\r\n\t\t\t\tvariable: \"Minimum Impact\",\r\n\t\t\t\toption: \"Decrement\"\r\n\t\t\t}];\r\n\t\t\tlocalStorage.setItem('finishedMaps', JSON.stringify(sampleMaps));\r\n\t\t};\r\n\r\n\r\n\t\tlet formDataNew = require('../data/config.json');\r\n\t\tlet newFinishedMaps = JSON.parse(localStorage.getItem('finishedMaps'))\r\n\r\n\t\tthis.state = { ...this.state, formData: formDataNew, finishedMaps: newFinishedMaps }\r\n\r\n\t}\r\n\r\n\r\n\tcreateMap() { //TODO: prevent duplicate maps\r\n\t\tconst { report, variable, option, finishedMaps } = this.state\r\n\r\n\t\tlet newFinishedMaps = this.state.finishedMaps\r\n\r\n\t\tnewFinishedMaps.push({ report: report, variable: variable, option: option })\r\n\r\n\t\tthis.setState({ finishedMaps: newFinishedMaps, report: null, variable: null, option: null })\r\n\r\n\t}\r\n\r\n\thandleSelect = (value) => () => { //handles the checkboxes\r\n\t\tconst { selectedMaps } = this.state\r\n\r\n\t\tconst currentIndex = selectedMaps.indexOf(value);\r\n\t\tconst newSelectedMaps = [...selectedMaps];\r\n\t\tif (currentIndex !== -1) { // to deselect\r\n\t\t\tnewSelectedMaps.splice(currentIndex, 1);\r\n\t\t}\r\n\t\telse if (selectedMaps.length !== 2) { // if you already selected two maps\r\n\t\t\tnewSelectedMaps.push(value);\r\n\t\t}\r\n\r\n\t\tthis.setState({ selectedMaps: newSelectedMaps })\r\n\t};\r\n\r\n\tviewMap() {\r\n\t\twindow.open('https://lucastjerez.github.io/heatmap_demo/map.html')\r\n\t}\r\n\r\n\tviewDualMap() {\r\n\t\twindow.open('https://lucastjerez.github.io/heatmap_demo/dualmap.html')\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props\r\n\r\n\t\tconst { formData, report, variable, option, finishedMaps, selectedMaps } = this.state\r\n\t\treturn (\r\n\t\t\t<Container component=\"main\" >\r\n\t\t\t\t<Grid container spacing={6}>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\r\n\t\t\t\t\t\t<div className={classes.paper}>\r\n\t\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\r\n\t\t\t\t\t\t\t\tCreate Map\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<form className={classes.form} noValidate>\r\n\t\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\t\tvalue={report}\r\n\t\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\r\n\t\t\t\t\t\t\t\t\t\tthis.setState({ report: newValue })\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\toptions={formData.reports}\r\n\t\t\t\t\t\t\t\t\trenderInput={(params) => <TextField  {...params} label=\"Select Report\" margin=\"normal\" variant=\"outlined\" />}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\t\tvalue={variable}\r\n\t\t\t\t\t\t\t\t\tdisabled={report === null}\r\n\t\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\r\n\t\t\t\t\t\t\t\t\t\tthis.setState({ variable: newValue })\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tid=\"controllable-states-demo\"\r\n\t\t\t\t\t\t\t\t\toptions={formData.variables}\r\n\t\t\t\t\t\t\t\t\trenderInput={(params) => <TextField {...params} label=\"Select Variable\" margin=\"normal\" variant=\"outlined\" />}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\t\t\tvalue={option}\r\n\t\t\t\t\t\t\t\t\tdisabled={variable === null}\r\n\t\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\r\n\t\t\t\t\t\t\t\t\t\tthis.setState({ option: newValue })\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\toptions={formData.options}\r\n\t\t\t\t\t\t\t\t\trenderInput={(params) => <TextField {...params} label=\"Select Option\" margin=\"normal\" variant=\"outlined\" />}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tclassName={classes.submit}\r\n\t\t\t\t\t\t\t\t\tdisabled={option === null}\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.createMap()}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tCreate\r\n\t\t\t</Button>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<div className={classes.paper}>\r\n\t\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\r\n\t\t\t\t\t\t\t\tAvailable Maps\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tclassName={classes.submit}\r\n\t\t\t\t\t\t\t\tdisabled={selectedMaps.length != 2}\r\n\t\t\t\t\t\t\t\tonClick={() => this.viewDualMap()}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tDual-map Comparison (select two)\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<List className={classes.form}>\r\n\t\t\t\t\t\t\t\t{finishedMaps.map((value) => {\r\n\t\t\t\t\t\t\t\t\tconst labelId = value.report + \", \" + value.variable + \", \" + value.option\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<ListItem key={labelId} role={undefined} dense button\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.viewMap()}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<ListItemText id={labelId} primary={labelId} />\r\n\t\t\t\t\t\t\t\t\t\t\t<ListItemSecondaryAction >\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={this.handleSelect(value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tedge=\"start\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={selectedMaps.indexOf(value) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisableRipple\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-labelledby': labelId }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</ListItemSecondaryAction>\r\n\t\t\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</List>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}\r\nexport default withStyles(styles, { withTheme: true })(Main);\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t  <Main />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}